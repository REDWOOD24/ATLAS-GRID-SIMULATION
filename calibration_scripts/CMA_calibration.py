import os
import json
import pandas as pd
import time
import random
import nevergrad as ng

# ------------------------ Helper Functions ------------------------

def update_cfg(path, parameterValueDict):
    """
    Update the configuration file with the new parameters.
    """
    with open(path, 'r') as f:
        data = json.load(f)
    
    for parameter in parameterValueDict:
        data[parameter] = parameterValueDict[parameter]
        
    with open(path, 'w') as f:
        json.dump(data, f, indent=4)

def update_site_info(path, site, cpu_speed):
    """
    Update the site information in the JSON file.
    """
    with open(path, 'r') as f:
        data = json.load(f)
    
    data[site]['CPUSpeed'] = cpu_speed
    with open(path, 'w') as f:
        json.dump(data, f, indent=4)

def run_simulation(site, cpu_min_max, speed_precision, CPUSpeed, run_tag):
    """
    Run the simulator after updating the configuration and site info.
    Returns:
        single_core_mean_abs_error, multi_core_mean_abs_error
    """
    parameterValueDict = {
        "Num_of_Jobs": 100,
        "cpu_min_max": cpu_min_max,
        "cpu_speed_precision": speed_precision,
        "Sites": [site],
        "Output_DB": f"/home/sairam/ATLASGRIDV2/ATLAS-GRID-SIMULATION/output/NET2_jobs_output_{run_tag}.db",
        "Input_Job_CSV": "/home/sairam/ATLASGRID/ATLAS-GRID-SIMULATION/data/NET2_jobs_jan.csv"
    }
    update_cfg(config_path, parameterValueDict)
    update_site_info(site_info_path, site, CPUSpeed)
    
    # Run the simulator command.
    os.system(command)
    time.sleep(2)  # Allow some time for the simulation to complete.
    
    # Read the output CSV file generated by the simulation.
    output_file_csv = f"/home/sairam/ATLASGRIDV2/ATLAS-GRID-SIMULATION/output/NET2_jobs_output_{run_tag}.csv"
    try:
        df_raw = pd.read_csv(output_file_csv)
    except Exception as e:
        print(f"Error reading output file for run {run_tag}: {e}")
        df_raw = None

    # Initialize errors.
    single_core_mean_abs_error = float('inf')
    multi_core_mean_abs_error = float('inf')

    if df_raw is not None:
        # Process Single-Core jobs:
        df_single = df_raw[(df_raw['STATUS'] == "finished") & (df_raw['CORES'] == 1)]
        if not df_single.empty:
            df_single['error'] = df_single['CPU_CONSUMPTION_TIME'] - df_single['EXECUTION_TIME']
            df_single['absolute_error'] = df_single['error'].abs()
            single_core_mean_abs_error = df_single['absolute_error'].mean()
        
        # Process Multi-Core jobs (8 cores):
        df_multi = df_raw[(df_raw['STATUS'] == "finished") & (df_raw['CORES'] == 8)]
        if not df_multi.empty:
            df_multi['error'] = (df_multi['CPU_CONSUMPTION_TIME'] - df_multi['EXECUTION_TIME']) / 8
            df_multi['absolute_error'] = df_multi['error'].abs()
            multi_core_mean_abs_error = df_multi['absolute_error'].mean()
    
    # Clean up: delete the output file if it exists.
    output_file = f"/home/sairam/ATLASGRIDV2/ATLAS-GRID-SIMULATION/output/NET2_jobs_output_{run_tag}.db"
    if os.path.exists(output_file):
        os.remove(output_file)
        print(f"Deleted output file: {output_file}")
    
    return single_core_mean_abs_error, multi_core_mean_abs_error

# ------------------------ Global Settings ------------------------

sites = ["NET2_Amherst"]
config_path = "/home/sairam/ATLASGRIDV2/ATLAS-GRID-SIMULATION/config-files/config.json"
site_info_path = "/home/sairam/ATLASGRIDV2/ATLAS-GRID-SIMULATION/data/site_info_cpu.json"
command = "/home/sairam/ATLASGRIDV2/ATLAS-GRID-SIMULATION/build/atlas-grid-simulator -c /home/sairam/ATLASGRIDV2/ATLAS-GRID-SIMULATION/config-files/config.json"

# Load site_info which should include "CPUCount" for each site
with open(site_info_path, 'r') as f:
    site_info = json.load(f)

# ------------------------ Nevergrad Objective Function ------------------------
def simulation_objective(min_val, range_offset, speed_precision_index):
    """
    Objective function for Nevergrad.
    Parameters:
      - min_val: integer in [1,8]
      - range_offset: integer in [0,7]
      - speed_precision_index: integer in [0,7], mapping to one of {5,6,7,8,9,10,11,12}
    
    cpu_min_max is formed as [min_val, min_val + 1 + range_offset]. The upper bound must be <= 9.
    Returns the average error (average of single-core and multi-core errors).
    """
    # Convert to integers (they should be already, but ensure)
    min_val = int(round(min_val))
    range_offset = int(round(range_offset))
    speed_precision_index = int(round(speed_precision_index))
    
    # Compute the upper bound and check constraint
    upper_bound = min_val + 1 + range_offset
    if upper_bound > 9:
        print(f"Invalid configuration: min_val={min_val}, range_offset={range_offset} -> upper_bound={upper_bound} > 9")
        return float('inf')
    
    cpu_min_max = [min_val, upper_bound]
    
    # Map speed_precision_index to actual value using the set {5,6,7,8,9,10,11,12}
    possible_precisions = [5, 6, 7, 8, 9, 10, 11, 12]
    speed_precision = possible_precisions[speed_precision_index]
    
    site = "NET2_Amherst"
    # Generate one CPUSpeed ordering for the given configuration.
    CPUSpeed = [
        random.randint(min_val, upper_bound) * (10 ** speed_precision)
        for _ in range(site_info[site]['CPUCount'])
    ]
    
    run_tag = f"NG_{min_val}_{upper_bound}_{speed_precision}"
    
    # Run simulation and gather errors.
    single_err, multi_err = run_simulation(site, cpu_min_max, speed_precision, CPUSpeed, run_tag)
    avg_error = (single_err + multi_err) / 2.0
    print(f"Configuration: cpu_min_max={cpu_min_max}, speed_precision={speed_precision} --> Avg Error: {avg_error}")
    
    return avg_error

# ------------------------ Nevergrad Optimization ------------------------

if __name__ == '__main__':
    # Define the parameter space using Nevergrad's Instrumentation API:
    #   - min_val: integer in [1, 8]
    #   - range_offset: integer in [0, 7]
    #   - speed_precision_index: integer in [0, 7] (0->5, 1->6, ..., 7->12)
    parametrization = ng.p.Instrumentation(
        ng.p.Scalar(lower=1, upper=8).set_integer_casting(),   # min_val
        ng.p.Scalar(lower=0, upper=7).set_integer_casting(),   # range_offset
        ng.p.Scalar(lower=0, upper=7).set_integer_casting()    # speed_precision_index
    )
    
    # Choose Nevergrad's CMA optimizer with a budget (number of evaluations)
    optimizer = ng.optimizers.CMA(parametrization=parametrization, budget=50)
    recommendation = optimizer.minimize(simulation_objective)
    print("Recommended parameters for min_val, range_offset, speed_precision_index:", recommendation.args)
    print("Nevergrad recommended parameters:", recommendation.value)
