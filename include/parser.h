// ==============================================                                                                               
// Author: Raees Khan                                                                                                            
// Email: rak177@pitt.edu                                                                                                        
// Created Date: 2024-08-15                                                                                                      
// Description: Class to parse json containing information about ATLAS grid sites.                                               
// ==============================================   


#ifndef PARSER_H
#define PARSER_H

#include <map>
#include <set>
#include <fstream>
#include <string>
#include <math.h>
#include "nlohmann/json.hpp"
#include <random>


//Information needed to a specify a Disk                                                      
struct DiskInfo {
  std::string   name{};
  double        read_bw{};
  double        write_bw{};
  std::string   size{};
  std::string   mount{};  
};

//Information needed to a specify a host (CPU)
struct CPUInfo {
  int                    cores{};
  double                 speed{};
  double                 BW_CPU{};
  double                 LAT_CPU{};
  std::string            ram{};
  std::vector<DiskInfo>  disk_info{};
};

//Information needed to a specify a Job
struct JobInfo {
  long long              jobid{}; // this equivalent to PANDAID in historical hjo
  std::string            creation_time{}; //generated by Oracle's SYSDATE function when the job is inserted to jobsDefined4
  std::string            job_status{}; // status of the job
  std::string            job_name{}; // the job name defined in prodDB
  double                 cpu_consumption_time{}; //actual execution time of the job
  std::string            computing_site{}; //site name where the job runs
  std::string            destination_dataset_name{}; //name of destination dataset for the job; is used to register the outputs of an associated set of jobs as belonging to one block to be saved at an archival destination
  std::string            destination_SE{}; // destination storage element of job output files
  std::string            source_site{}; // source site (usually CE) for file transfer
  std::string            transfer_type{}; //type of file transfer
  int                    core_count{}; //the number of CPU cores
  int                    no_of_inp_files{}; // the number of input files
  double                 inp_file_bytes{}; // the total size of input files
  int                    no_of_out_files{}; // the number of output files
  double                 out_file_bytes{}; // the total size of output files
  std::string            pilot_error_code{}; // pilot error code
  std::string            exe_error_code{}; // executor error code
  std::string            ddm_error_code{}; // DDM error code
  std::string            dispatcher_error_code{}; // jobDispatcher error code
  std::string            taskbuffer_error_code{}; // taskBuffer error code
  // flops field is calculated with an approximation in PANDA_DISPATCHER::allocateResourcesToJobs
  double                 flops{};
  // below fields will be assigned by dispatcher
  int                                         cores{};
  std::string                                 disk{};
  std::string                                 comp_host{};
  // old job defination variables
  std::string                                 id{};
  std::unordered_map<std::string, size_t>     input_files{};
  std::unordered_map<std::string, size_t>     output_files{};


};

std::ostream& operator<<(std::ostream& os, const JobInfo& job);

using namespace nlohmann;

class Parser
{


public:
  Parser(const std::string& _siteConnInfoFile, const std::string& _siteInfoFile, const std::string& _jobInfoFile);
  Parser(){}
 ~Parser(){};

 int                                                                       genRandNum(int lower, int upper);
 double                                                                    GaussianDistribution(double mean, double stddev);
 void                                                                      setSiteNames();
 void                                                                      setSiteCPUCount();
 void                                                                      setSiteGFLOPS();
 std::vector<DiskInfo>                                                     getDisksInfo(const std::string site_name, int num_of_cpus);
 std::unordered_map<std::string, std::pair<double, double>>                getSiteConnInfo();
 std::unordered_map<std::string, std::unordered_map<std::string,CPUInfo>>  getSiteNameCPUInfo();
 std::vector<JobInfo>                                                      getJobsInfo(long max_jobs);
 std::unordered_map<std::string,int>                                       getSiteNameGFLOPS();

 
 
private:
  std::string                          siteConnInfoFile;
  std::string                          siteInfoFile;
  std::string                          jobInfoFile;
  std::set<std::string>                site_names;
  std::unordered_map<std::string,int>  siteCPUCount;
  std::unordered_map<std::string,int>  siteNameGFLOPS;
};

#endif

